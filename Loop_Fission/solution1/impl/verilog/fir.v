// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=232,HLS_SYN_LUT=277,HLS_VERSION=2019_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r,
        output_r_ap_vld,
        input_r
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] output_r;
output   output_r_ap_vld;
input  [31:0] input_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [2:0] c1_address0;
reg    c1_ce0;
wire   [9:0] c1_q0;
wire   [2:0] i_fu_134_p2;
reg   [2:0] i_reg_201;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_128_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln26_fu_150_p2;
wire   [2:0] i_1_fu_162_p2;
reg   [2:0] i_1_reg_224;
wire   [31:0] mul_ln31_fu_168_p2;
reg   [31:0] mul_ln31_reg_229;
reg  signed [31:0] shift_reg_load_1_reg_234;
wire    ap_CS_fsm_state5;
reg   [9:0] c1_load_reg_239;
wire   [31:0] mul_ln28_fu_176_p2;
reg   [31:0] mul_ln28_reg_244;
wire    ap_CS_fsm_state6;
wire   [31:0] acc_fu_181_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] i_0_reg_93;
wire    ap_CS_fsm_state3;
reg   [31:0] acc_0_reg_105;
reg   [2:0] i1_0_reg_117;
wire   [63:0] zext_ln19_fu_140_p1;
wire   [63:0] zext_ln19_1_fu_145_p1;
wire   [63:0] zext_ln28_fu_156_p1;
wire    ap_CS_fsm_state8;
wire  signed [31:0] mul_ln31_fu_168_p0;
wire  signed [9:0] mul_ln28_fu_176_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_c1 #(
    .DataWidth( 10 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c1_address0),
    .ce0(c1_ce0),
    .q0(c1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_0_reg_105 <= acc_fu_181_p2;
    end else if (((icmp_ln17_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_0_reg_105 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i1_0_reg_117 <= i_1_reg_224;
    end else if (((icmp_ln17_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_117 <= 3'd5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_93 <= i_reg_201;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_93 <= 3'd5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c1_load_reg_239 <= c1_q0;
        shift_reg_load_1_reg_234 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_224 <= i_1_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_201 <= i_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln28_reg_244 <= mul_ln28_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        mul_ln31_reg_229 <= mul_ln31_fu_168_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c1_ce0 = 1'b1;
    end else begin
        c1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ap_vld = 1'b1;
    end else begin
        output_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_address0 = zext_ln28_fu_156_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = zext_ln19_1_fu_145_p1;
    end else if ((((icmp_ln26_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln17_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_address0 = 3'd0;
    end else if (((icmp_ln17_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln19_fu_140_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln26_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln26_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln17_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln17_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if ((((icmp_ln26_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln17_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_d0 = input_r;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln26_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln17_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln26_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_181_p2 = (mul_ln28_reg_244 + acc_0_reg_105);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign c1_address0 = zext_ln28_fu_156_p1;

assign i_1_fu_162_p2 = ($signed(i1_0_reg_117) + $signed(3'd7));

assign i_fu_134_p2 = ($signed(i_0_reg_93) + $signed(3'd7));

assign icmp_ln17_fu_128_p2 = ((i_0_reg_93 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_150_p2 = ((i1_0_reg_117 == 3'd0) ? 1'b1 : 1'b0);

assign mul_ln28_fu_176_p1 = c1_load_reg_239;

assign mul_ln28_fu_176_p2 = ($signed(shift_reg_load_1_reg_234) * $signed(mul_ln28_fu_176_p1));

assign mul_ln31_fu_168_p0 = input_r;

assign mul_ln31_fu_168_p2 = ($signed(mul_ln31_fu_168_p0) * $signed('h35));

assign output_r = (acc_0_reg_105 + mul_ln31_reg_229);

assign zext_ln19_1_fu_145_p1 = i_0_reg_93;

assign zext_ln19_fu_140_p1 = i_fu_134_p2;

assign zext_ln28_fu_156_p1 = i1_0_reg_117;

endmodule //fir
